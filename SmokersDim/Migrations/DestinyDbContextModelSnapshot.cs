// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SmokersDim.Migrations
{
    [DbContext(typeof(DestinyDbContext))]
    partial class DestinyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Action", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionTypeLabel")
                        .HasColumnType("text");

                    b.Property<bool>("ConsumeEntireStack")
                        .HasColumnType("boolean");

                    b.Property<bool>("DeleteOnAction")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean");

                    b.Property<string>("OverlayIcon")
                        .HasColumnType("text");

                    b.Property<string>("OverlayScreenName")
                        .HasColumnType("text");

                    b.Property<long>("RequiredCooldownHash")
                        .HasColumnType("bigint");

                    b.Property<int>("RequiredCooldownSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("RequiredLocation")
                        .HasColumnType("text");

                    b.Property<long>("RewardItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardSheetHash")
                        .HasColumnType("bigint");

                    b.Property<long>("RewardSiteHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseOnAcquire")
                        .HasColumnType("boolean");

                    b.Property<string>("VerbDescription")
                        .HasColumnType("text");

                    b.Property<string>("VerbName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArtArrangementHash")
                        .HasColumnType("bigint");

                    b.Property<long>("ClassHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("TranslationBlockWeaponPatternHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TranslationBlockWeaponPatternHash");

                    b.ToTable("Arrangements");
                });

            modelBuilder.Entity("Crafting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BaseMaterialRequirements")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("FailedRequirementStrings")
                        .HasColumnType("text[]");

                    b.Property<long>("OutputItemHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("RequiredSocketTypeHashes")
                        .HasColumnType("bigint[]");

                    b.HasKey("Id");

                    b.ToTable("Craftings");
                });

            modelBuilder.Entity("CraftingBlockBonusPlug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CraftingId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlugItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("SocketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CraftingId");

                    b.ToTable("CraftingBlockBonusPlugs");
                });

            modelBuilder.Entity("DestinyColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Alpha")
                        .HasColumnType("integer");

                    b.Property<int>("Blue")
                        .HasColumnType("integer");

                    b.Property<long>("ColorHash")
                        .HasColumnType("bigint");

                    b.Property<int>("Green")
                        .HasColumnType("integer");

                    b.Property<int>("Red")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DestinyColors");
                });

            modelBuilder.Entity("DisplayProperties", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("HasIcon")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DisplayProperties");
                });

            modelBuilder.Entity("DyeReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelHash")
                        .HasColumnType("bigint");

                    b.Property<long>("DyeHash")
                        .HasColumnType("bigint");

                    b.Property<long>("TranslationBlockId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TranslationBlockId");

                    b.ToTable("DyeReferences");
                });

            modelBuilder.Entity("EquippingBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AmmoType")
                        .HasColumnType("integer");

                    b.Property<int>("Attributes")
                        .HasColumnType("integer");

                    b.Property<List<string>>("DisplayStrings")
                        .HasColumnType("text[]");

                    b.Property<long>("EquipmentSlotTypeHash")
                        .HasColumnType("bigint");

                    b.Property<long>("EquippingSoundHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("GearsetItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("HornSoundHash")
                        .HasColumnType("bigint");

                    b.Property<string>("UniqueLabel")
                        .HasColumnType("text");

                    b.Property<long>("UniqueLabelHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EquippingBlocks");
                });

            modelBuilder.Entity("IntrinsicSocketEntryDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("DefaultVisible")
                        .HasColumnType("boolean");

                    b.Property<long>("PlugItemHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("IntrinsicSocketEntryDefinitions");
                });

            modelBuilder.Entity("Inventory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BucketTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("ExpirationTooltip")
                        .HasColumnType("text");

                    b.Property<string>("ExpiredInActivityMessage")
                        .HasColumnType("text");

                    b.Property<string>("ExpiredInOrbitMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsInstanceItem")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxStackSize")
                        .HasColumnType("integer");

                    b.Property<bool>("NonTransferrableOriginal")
                        .HasColumnType("boolean");

                    b.Property<long>("RecipeItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("RecoveryBucketTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("StackUniqueLabel")
                        .HasColumnType("text");

                    b.Property<bool>("SuppressExpirationWhenObjectivesComplete")
                        .HasColumnType("boolean");

                    b.Property<int>("TierType")
                        .HasColumnType("integer");

                    b.Property<long>("TierTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("TierTypeName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InvestmentStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsConditionallyActive")
                        .HasColumnType("boolean");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatTypeHash")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("InvestmentStats");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<long>("Hash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Hash"));

                    b.Property<long>("AcquireRewardSiteHash")
                        .HasColumnType("bigint");

                    b.Property<long>("AcquireUnlockHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowActions")
                        .HasColumnType("boolean");

                    b.Property<long?>("BackgroundColorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Blacklisted")
                        .HasColumnType("boolean");

                    b.Property<int>("BreakerType")
                        .HasColumnType("integer");

                    b.Property<long?>("BreakerTypeHash")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassType")
                        .HasColumnType("integer");

                    b.Property<long?>("CollectibleHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("CraftingId")
                        .HasColumnType("bigint");

                    b.Property<long[]>("DamageTypeHashes")
                        .HasColumnType("bigint[]");

                    b.Property<List<int>>("DamageTypes")
                        .HasColumnType("integer[]");

                    b.Property<int>("DefaultDamageType")
                        .HasColumnType("integer");

                    b.Property<long?>("DefaultDamageTypeHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisplayPropertiesId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplaySource")
                        .HasColumnType("text");

                    b.Property<bool>("DoesPostmasterPullHaveSideEffects")
                        .HasColumnType("boolean");

                    b.Property<long?>("EmblemObjectiveHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("Equippable")
                        .HasColumnType("boolean");

                    b.Property<long?>("EquippingBlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("FlavorText")
                        .HasColumnType("text");

                    b.Property<string>("IconWatermark")
                        .HasColumnType("text");

                    b.Property<string>("IconWatermarkShelved")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsWrapper")
                        .HasColumnType("boolean");

                    b.Property<long[]>("ItemCategoryHashes")
                        .HasColumnType("bigint[]");

                    b.Property<int>("ItemSubType")
                        .HasColumnType("integer");

                    b.Property<int>("ItemType")
                        .HasColumnType("integer");

                    b.Property<string>("ItemTypeAndTierDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ItemTypeDisplayName")
                        .HasColumnType("text");

                    b.Property<long?>("LoreHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("NonTransferrable")
                        .HasColumnType("boolean");

                    b.Property<long?>("QualityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Redacted")
                        .HasColumnType("boolean");

                    b.Property<string>("Screenshot")
                        .HasColumnType("text");

                    b.Property<long?>("SeasonHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SocketsId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpecialItemType")
                        .HasColumnType("integer");

                    b.Property<long?>("StatsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SummaryItemHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("TalentGridId")
                        .HasColumnType("bigint");

                    b.Property<long[]>("TraitHashes")
                        .HasColumnType("bigint[]");

                    b.Property<List<string>>("TraitIds")
                        .HasColumnType("text[]");

                    b.Property<long?>("TranslationBlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("UiItemDisplayStyle")
                        .HasColumnType("text");

                    b.Property<long?>("ValueId")
                        .HasColumnType("bigint");

                    b.HasKey("Hash");

                    b.HasIndex("ActionId");

                    b.HasIndex("BackgroundColorId");

                    b.HasIndex("CraftingId");

                    b.HasIndex("DisplayPropertiesId");

                    b.HasIndex("EquippingBlockId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("QualityId");

                    b.HasIndex("SetDataId");

                    b.HasIndex("SocketsId");

                    b.HasIndex("StatsId");

                    b.HasIndex("TalentGridId");

                    b.HasIndex("TranslationBlockId");

                    b.HasIndex("ValueId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ItemQuantity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("HasConditionalVisibility")
                        .HasColumnType("boolean");

                    b.Property<long>("ItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemInstanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<long?>("ValueBlockId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ValueBlockId");

                    b.ToTable("ItemQuantities");
                });

            modelBuilder.Entity("PerkEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PerkHash")
                        .HasColumnType("bigint");

                    b.Property<int>("PerkVisibility")
                        .HasColumnType("integer");

                    b.Property<string>("RequirementDisplayString")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("PerkEntries");
                });

            modelBuilder.Entity("ProgressionReward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<bool>("ApplyThrottles")
                        .HasColumnType("boolean");

                    b.Property<long>("ProgressionMappingHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("ProgressionRewards");
                });

            modelBuilder.Entity("Quality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CurrentVersion")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("DisplayVersionWatermarkIcons")
                        .HasColumnType("text[]");

                    b.Property<long>("InfusionCategoryHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("InfusionCategoryHashes")
                        .HasColumnType("bigint[]");

                    b.Property<string>("InfusionCategoryName")
                        .HasColumnType("text");

                    b.Property<List<int>>("ItemLevels")
                        .HasColumnType("integer[]");

                    b.Property<long>("ProgressionLevelRequirementHash")
                        .HasColumnType("bigint");

                    b.Property<int>("QualityLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("RequiredItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<bool>("DeleteOnAction")
                        .HasColumnType("boolean");

                    b.Property<long>("ItemHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("RequiredItems");
                });

            modelBuilder.Entity("SetBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("QuestLineDescription")
                        .HasColumnType("text");

                    b.Property<string>("QuestLineName")
                        .HasColumnType("text");

                    b.Property<string>("QuestStepSummary")
                        .HasColumnType("text");

                    b.Property<bool>("RequireOrderedSetItemAdd")
                        .HasColumnType("boolean");

                    b.Property<bool>("SetIsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("SetType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SetBlocks");
                });

            modelBuilder.Entity("SetBlockEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ItemHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetBlockId")
                        .HasColumnType("bigint");

                    b.Property<int>("TrackingValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SetBlockId");

                    b.ToTable("SetBlockEntries");
                });

            modelBuilder.Entity("SocketBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Detail")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SocketBlocks");
                });

            modelBuilder.Entity("SocketCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocketCategoryHash")
                        .HasColumnType("bigint");

                    b.Property<List<int>>("SocketIndexes")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("SocketCategories");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("DefaultVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("HidePerksInItemTooltip")
                        .HasColumnType("boolean");

                    b.Property<int>("PlugSources")
                        .HasColumnType("integer");

                    b.Property<bool>("PreventInitializationOnVendorPurchase")
                        .HasColumnType("boolean");

                    b.Property<long?>("RandomizedPlugSetHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReusablePlugSetHash")
                        .HasColumnType("bigint");

                    b.Property<long>("SingleInitialItemHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("SocketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("SocketEntries");
                });

            modelBuilder.Entity("SocketEntryPlugItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PlugItemHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("SocketEntryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SocketEntryId");

                    b.ToTable("SocketEntryPlugItems");
                });

            modelBuilder.Entity("StatEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayMaximum")
                        .HasColumnType("integer");

                    b.Property<int>("Maximum")
                        .HasColumnType("integer");

                    b.Property<int>("Minimum")
                        .HasColumnType("integer");

                    b.Property<long>("StatHash")
                        .HasColumnType("bigint");

                    b.Property<long>("StatsBlockId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatsBlockId");

                    b.ToTable("StatEntries");
                });

            modelBuilder.Entity("StatsBlock", b =>
                {
                    b.Property<long>("StatGroupHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("StatGroupHash"));

                    b.Property<bool>("DisablePrimaryStatDisplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasDisplayableStats")
                        .HasColumnType("boolean");

                    b.Property<long>("PrimaryBaseStatHash")
                        .HasColumnType("bigint");

                    b.HasKey("StatGroupHash");

                    b.ToTable("StatsBlocks");
                });

            modelBuilder.Entity("TalentGrid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BuildName")
                        .HasColumnType("text");

                    b.Property<int>("HudDamageType")
                        .HasColumnType("integer");

                    b.Property<string>("HudIcon")
                        .HasColumnType("text");

                    b.Property<string>("ItemDetailString")
                        .HasColumnType("text");

                    b.Property<long>("TalentGridHash")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TalentGrids");
                });

            modelBuilder.Entity("TooltipNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayString")
                        .HasColumnType("text");

                    b.Property<string>("DisplayStyle")
                        .HasColumnType("text");

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("TooltipNotifications");
                });

            modelBuilder.Entity("TranslationBlock", b =>
                {
                    b.Property<long>("WeaponPatternHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("WeaponPatternHash"));

                    b.Property<bool>("HasGeometry")
                        .HasColumnType("boolean");

                    b.Property<string>("WeaponPatternIdentifier")
                        .HasColumnType("text");

                    b.HasKey("WeaponPatternHash");

                    b.ToTable("TranslationBlocks");
                });

            modelBuilder.Entity("ValueBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ValueDescription")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ValueBlocks");
                });

            modelBuilder.Entity("Version", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PowerCapHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("QualityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QualityId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.HasOne("TranslationBlock", null)
                        .WithMany("Arrangements")
                        .HasForeignKey("TranslationBlockWeaponPatternHash");
                });

            modelBuilder.Entity("CraftingBlockBonusPlug", b =>
                {
                    b.HasOne("Crafting", null)
                        .WithMany("BonusPlugs")
                        .HasForeignKey("CraftingId");
                });

            modelBuilder.Entity("DyeReference", b =>
                {
                    b.HasOne("TranslationBlock", "TranslationBlock")
                        .WithMany("LockedDyes")
                        .HasForeignKey("TranslationBlockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TranslationBlock");
                });

            modelBuilder.Entity("IntrinsicSocketEntryDefinition", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("IntrinsicSockets")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("InvestmentStat", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("InvestmentStats")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("DestinyColor", "BackgroundColor")
                        .WithMany()
                        .HasForeignKey("BackgroundColorId");

                    b.HasOne("Crafting", "Crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId");

                    b.HasOne("DisplayProperties", "DisplayProperties")
                        .WithMany()
                        .HasForeignKey("DisplayPropertiesId");

                    b.HasOne("EquippingBlock", "EquippingBlock")
                        .WithMany()
                        .HasForeignKey("EquippingBlockId");

                    b.HasOne("Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("Quality", "Quality")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("SetBlock", "SetData")
                        .WithMany()
                        .HasForeignKey("SetDataId");

                    b.HasOne("SocketBlock", "Sockets")
                        .WithMany()
                        .HasForeignKey("SocketsId");

                    b.HasOne("StatsBlock", "Stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.HasOne("TalentGrid", "TalentGrid")
                        .WithMany()
                        .HasForeignKey("TalentGridId");

                    b.HasOne("TranslationBlock", "TranslationBlock")
                        .WithMany()
                        .HasForeignKey("TranslationBlockId");

                    b.HasOne("ValueBlock", "Value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("Action");

                    b.Navigation("BackgroundColor");

                    b.Navigation("Crafting");

                    b.Navigation("DisplayProperties");

                    b.Navigation("EquippingBlock");

                    b.Navigation("Inventory");

                    b.Navigation("Quality");

                    b.Navigation("SetData");

                    b.Navigation("Sockets");

                    b.Navigation("Stats");

                    b.Navigation("TalentGrid");

                    b.Navigation("TranslationBlock");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("ItemQuantity", b =>
                {
                    b.HasOne("ValueBlock", null)
                        .WithMany("ItemValue")
                        .HasForeignKey("ValueBlockId");
                });

            modelBuilder.Entity("PerkEntry", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("Perks")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("ProgressionReward", b =>
                {
                    b.HasOne("Action", null)
                        .WithMany("ProgressionRewards")
                        .HasForeignKey("ActionId");
                });

            modelBuilder.Entity("RequiredItem", b =>
                {
                    b.HasOne("Action", null)
                        .WithMany("RequiredItems")
                        .HasForeignKey("ActionId");
                });

            modelBuilder.Entity("SetBlockEntry", b =>
                {
                    b.HasOne("SetBlock", null)
                        .WithMany("ItemList")
                        .HasForeignKey("SetBlockId");
                });

            modelBuilder.Entity("SocketCategory", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("SocketCategories")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("SocketEntries")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("SocketEntryPlugItem", b =>
                {
                    b.HasOne("SocketEntry", null)
                        .WithMany("ReusablePlugItems")
                        .HasForeignKey("SocketEntryId");
                });

            modelBuilder.Entity("StatEntry", b =>
                {
                    b.HasOne("StatsBlock", "StatsBlock")
                        .WithMany("Stats")
                        .HasForeignKey("StatsBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatsBlock");
                });

            modelBuilder.Entity("TooltipNotification", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("TooltipNotifications")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Version", b =>
                {
                    b.HasOne("Quality", null)
                        .WithMany("Versions")
                        .HasForeignKey("QualityId");
                });

            modelBuilder.Entity("Action", b =>
                {
                    b.Navigation("ProgressionRewards");

                    b.Navigation("RequiredItems");
                });

            modelBuilder.Entity("Crafting", b =>
                {
                    b.Navigation("BonusPlugs");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Navigation("InvestmentStats");

                    b.Navigation("Perks");

                    b.Navigation("TooltipNotifications");
                });

            modelBuilder.Entity("Quality", b =>
                {
                    b.Navigation("Versions");
                });

            modelBuilder.Entity("SetBlock", b =>
                {
                    b.Navigation("ItemList");
                });

            modelBuilder.Entity("SocketBlock", b =>
                {
                    b.Navigation("IntrinsicSockets");

                    b.Navigation("SocketCategories");

                    b.Navigation("SocketEntries");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.Navigation("ReusablePlugItems");
                });

            modelBuilder.Entity("StatsBlock", b =>
                {
                    b.Navigation("Stats");
                });

            modelBuilder.Entity("TranslationBlock", b =>
                {
                    b.Navigation("Arrangements");

                    b.Navigation("LockedDyes");
                });

            modelBuilder.Entity("ValueBlock", b =>
                {
                    b.Navigation("ItemValue");
                });
#pragma warning restore 612, 618
        }
    }
}
