// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SmokersDim.Migrations
{
    [DbContext(typeof(DestinyDbContext))]
    [Migration("20240625080641_StatsCollectionUpdate")]
    partial class StatsCollectionUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Action", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("actionTypeLabel")
                        .HasColumnType("text");

                    b.Property<bool>("consumeEntireStack")
                        .HasColumnType("boolean");

                    b.Property<bool>("deleteOnAction")
                        .HasColumnType("boolean");

                    b.Property<bool>("isPositive")
                        .HasColumnType("boolean");

                    b.Property<string>("overlayIcon")
                        .HasColumnType("text");

                    b.Property<string>("overlayScreenName")
                        .HasColumnType("text");

                    b.Property<long>("requiredCooldownHash")
                        .HasColumnType("bigint");

                    b.Property<int>("requiredCooldownSeconds")
                        .HasColumnType("integer");

                    b.Property<string>("requiredLocation")
                        .HasColumnType("text");

                    b.Property<long>("rewardItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("rewardSheetHash")
                        .HasColumnType("bigint");

                    b.Property<long>("rewardSiteHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("useOnAcquire")
                        .HasColumnType("boolean");

                    b.Property<string>("verbDescription")
                        .HasColumnType("text");

                    b.Property<string>("verbName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("TranslationBlockweaponPatternHash")
                        .HasColumnType("bigint");

                    b.Property<long>("artArrangementHash")
                        .HasColumnType("bigint");

                    b.Property<long>("classHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("TranslationBlockweaponPatternHash");

                    b.ToTable("Arrangements");
                });

            modelBuilder.Entity("Crafting", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("baseMaterialRequirements")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("failedRequirementStrings")
                        .HasColumnType("text[]");

                    b.Property<long>("outputItemHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("requiredSocketTypeHashes")
                        .HasColumnType("bigint[]");

                    b.HasKey("id");

                    b.ToTable("Craftings");
                });

            modelBuilder.Entity("CraftingBlockBonusPlug", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("CraftingId")
                        .HasColumnType("bigint");

                    b.Property<long>("plugItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("socketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("CraftingId");

                    b.ToTable("CraftingBlockBonusPlugs");
                });

            modelBuilder.Entity("DestinyColor", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("alpha")
                        .HasColumnType("integer");

                    b.Property<int>("blue")
                        .HasColumnType("integer");

                    b.Property<long>("colorHash")
                        .HasColumnType("bigint");

                    b.Property<int>("green")
                        .HasColumnType("integer");

                    b.Property<int>("red")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("DestinyColors");
                });

            modelBuilder.Entity("DisplayProperties", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("hasIcon")
                        .HasColumnType("boolean");

                    b.Property<string>("icon")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("DisplayProperties");
                });

            modelBuilder.Entity("DyeReference", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("channelHash")
                        .HasColumnType("bigint");

                    b.Property<long>("dyeHash")
                        .HasColumnType("bigint");

                    b.Property<long>("translationBlockId")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("translationBlockId");

                    b.ToTable("DyeReferences");
                });

            modelBuilder.Entity("EquippingBlock", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<int>("ammoType")
                        .HasColumnType("integer");

                    b.Property<int>("attributes")
                        .HasColumnType("integer");

                    b.Property<List<string>>("displayStrings")
                        .HasColumnType("text[]");

                    b.Property<long>("equipmentSlotTypeHash")
                        .HasColumnType("bigint");

                    b.Property<long>("equippingSoundHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("gearsetItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("hornSoundHash")
                        .HasColumnType("bigint");

                    b.Property<string>("uniqueLabel")
                        .HasColumnType("text");

                    b.Property<long>("uniqueLabelHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("EquippingBlocks");
                });

            modelBuilder.Entity("IntrinsicSocketEntryDefinition", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<bool>("defaultVisible")
                        .HasColumnType("boolean");

                    b.Property<long>("plugItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("socketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("IntrinsicSocketEntryDefinitions");
                });

            modelBuilder.Entity("Inventory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("bucketTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("expirationTooltip")
                        .HasColumnType("text");

                    b.Property<string>("expiredInActivityMessage")
                        .HasColumnType("text");

                    b.Property<string>("expiredInOrbitMessage")
                        .HasColumnType("text");

                    b.Property<bool>("isInstanceItem")
                        .HasColumnType("boolean");

                    b.Property<int>("maxStackSize")
                        .HasColumnType("integer");

                    b.Property<bool>("nonTransferrableOriginal")
                        .HasColumnType("boolean");

                    b.Property<long>("recipeItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("recoveryBucketTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("stackUniqueLabel")
                        .HasColumnType("text");

                    b.Property<bool>("suppressExpirationWhenObjectivesComplete")
                        .HasColumnType("boolean");

                    b.Property<int>("tierType")
                        .HasColumnType("integer");

                    b.Property<long>("tierTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("tierTypeName")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("InvestmentStat", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<bool>("isConditionallyActive")
                        .HasColumnType("boolean");

                    b.Property<long>("statTypeHash")
                        .HasColumnType("bigint");

                    b.Property<int>("value")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("ItemId");

                    b.ToTable("InvestmentStats");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Property<long>("hash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("hash"));

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BackgroundColorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CraftingId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DisplayPropertiesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EquippingBlockId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InventoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QualityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SetDataId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SocketsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatsId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TalentGridId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TranslationBlockId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueId")
                        .HasColumnType("bigint");

                    b.Property<long>("acquireRewardSiteHash")
                        .HasColumnType("bigint");

                    b.Property<long>("acquireUnlockHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("allowActions")
                        .HasColumnType("boolean");

                    b.Property<bool>("blacklisted")
                        .HasColumnType("boolean");

                    b.Property<int>("breakerType")
                        .HasColumnType("integer");

                    b.Property<long?>("breakerTypeHash")
                        .HasColumnType("bigint");

                    b.Property<int>("classType")
                        .HasColumnType("integer");

                    b.Property<long?>("collectibleHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("damageTypeHashes")
                        .HasColumnType("bigint[]");

                    b.Property<List<int>>("damageTypes")
                        .HasColumnType("integer[]");

                    b.Property<int>("defaultDamageType")
                        .HasColumnType("integer");

                    b.Property<long?>("defaultDamageTypeHash")
                        .HasColumnType("bigint");

                    b.Property<string>("displaySource")
                        .HasColumnType("text");

                    b.Property<bool>("doesPostmasterPullHaveSideEffects")
                        .HasColumnType("boolean");

                    b.Property<long?>("emblemObjectiveHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("equippable")
                        .HasColumnType("boolean");

                    b.Property<string>("flavorText")
                        .HasColumnType("text");

                    b.Property<string>("iconWatermark")
                        .HasColumnType("text");

                    b.Property<string>("iconWatermarkShelved")
                        .HasColumnType("text");

                    b.Property<int>("index")
                        .HasColumnType("integer");

                    b.Property<bool>("isWrapper")
                        .HasColumnType("boolean");

                    b.Property<long[]>("itemCategoryHashes")
                        .HasColumnType("bigint[]");

                    b.Property<int>("itemSubType")
                        .HasColumnType("integer");

                    b.Property<int>("itemType")
                        .HasColumnType("integer");

                    b.Property<string>("itemTypeAndTierDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("itemTypeDisplayName")
                        .HasColumnType("text");

                    b.Property<long?>("loreHash")
                        .HasColumnType("bigint");

                    b.Property<bool>("nonTransferrable")
                        .HasColumnType("boolean");

                    b.Property<bool>("redacted")
                        .HasColumnType("boolean");

                    b.Property<string>("screenshot")
                        .HasColumnType("text");

                    b.Property<long?>("seasonHash")
                        .HasColumnType("bigint");

                    b.Property<int>("specialItemType")
                        .HasColumnType("integer");

                    b.Property<long?>("summaryItemHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("traitHashes")
                        .HasColumnType("bigint[]");

                    b.Property<List<string>>("traitIds")
                        .HasColumnType("text[]");

                    b.Property<string>("uiItemDisplayStyle")
                        .HasColumnType("text");

                    b.HasKey("hash");

                    b.HasIndex("ActionId");

                    b.HasIndex("BackgroundColorId");

                    b.HasIndex("CraftingId");

                    b.HasIndex("DisplayPropertiesId");

                    b.HasIndex("EquippingBlockId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("QualityId");

                    b.HasIndex("SetDataId");

                    b.HasIndex("SocketsId");

                    b.HasIndex("StatsId");

                    b.HasIndex("TalentGridId");

                    b.HasIndex("TranslationBlockId");

                    b.HasIndex("ValueId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ItemQuantity", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ValueBlockId")
                        .HasColumnType("bigint");

                    b.Property<bool>("hasConditionalVisibility")
                        .HasColumnType("boolean");

                    b.Property<long>("itemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("itemInstanceId")
                        .HasColumnType("bigint");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("ValueBlockId");

                    b.ToTable("ItemQuantities");
                });

            modelBuilder.Entity("PerkEntry", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("perkHash")
                        .HasColumnType("bigint");

                    b.Property<int>("perkVisibility")
                        .HasColumnType("integer");

                    b.Property<string>("requirementDisplayString")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ItemId");

                    b.ToTable("PerkEntries");
                });

            modelBuilder.Entity("ProgressionReward", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<int>("amount")
                        .HasColumnType("integer");

                    b.Property<bool>("applyThrottles")
                        .HasColumnType("boolean");

                    b.Property<long>("progressionMappingHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("ActionId");

                    b.ToTable("ProgressionRewards");
                });

            modelBuilder.Entity("Quality", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long>("currentVersion")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("displayVersionWatermarkIcons")
                        .HasColumnType("text[]");

                    b.Property<long>("infusionCategoryHash")
                        .HasColumnType("bigint");

                    b.Property<long[]>("infusionCategoryHashes")
                        .HasColumnType("bigint[]");

                    b.Property<string>("infusionCategoryName")
                        .HasColumnType("text");

                    b.Property<List<int>>("itemLevels")
                        .HasColumnType("integer[]");

                    b.Property<long>("progressionLevelRequirementHash")
                        .HasColumnType("bigint");

                    b.Property<int>("qualityLevel")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("RequiredItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.Property<bool>("deleteOnAction")
                        .HasColumnType("boolean");

                    b.Property<long>("itemHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("ActionId");

                    b.ToTable("RequiredItems");
                });

            modelBuilder.Entity("SetBlock", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("questLineDescription")
                        .HasColumnType("text");

                    b.Property<string>("questLineName")
                        .HasColumnType("text");

                    b.Property<string>("questStepSummary")
                        .HasColumnType("text");

                    b.Property<bool>("requireOrderedSetItemAdd")
                        .HasColumnType("boolean");

                    b.Property<bool>("setIsFeatured")
                        .HasColumnType("boolean");

                    b.Property<string>("setType")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("SetBlocks");
                });

            modelBuilder.Entity("SetBlockEntry", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("SetBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("itemHash")
                        .HasColumnType("bigint");

                    b.Property<int>("trackingValue")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("SetBlockId");

                    b.ToTable("SetBlockEntries");
                });

            modelBuilder.Entity("SocketBlock", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("detail")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("SocketBlocks");
                });

            modelBuilder.Entity("SocketCategory", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<long>("socketCategoryHash")
                        .HasColumnType("bigint");

                    b.Property<List<int>>("socketIndexes")
                        .HasColumnType("integer[]");

                    b.HasKey("id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("SocketCategories");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("SocketBlockId")
                        .HasColumnType("bigint");

                    b.Property<bool>("defaultVisible")
                        .HasColumnType("boolean");

                    b.Property<bool>("hidePerksInItemTooltip")
                        .HasColumnType("boolean");

                    b.Property<int>("plugSources")
                        .HasColumnType("integer");

                    b.Property<bool>("preventInitializationOnVendorPurchase")
                        .HasColumnType("boolean");

                    b.Property<long?>("randomizedPlugSetHash")
                        .HasColumnType("bigint");

                    b.Property<long?>("reusablePlugSetHash")
                        .HasColumnType("bigint");

                    b.Property<long>("singleInitialItemHash")
                        .HasColumnType("bigint");

                    b.Property<long>("socketTypeHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("SocketBlockId");

                    b.ToTable("SocketEntries");
                });

            modelBuilder.Entity("SocketEntryPlugItem", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("SocketEntryId")
                        .HasColumnType("bigint");

                    b.Property<long>("plugItemHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("SocketEntryId");

                    b.ToTable("SocketEntryPlugItems");
                });

            modelBuilder.Entity("StatEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("displayMaximum")
                        .HasColumnType("integer");

                    b.Property<int>("maximum")
                        .HasColumnType("integer");

                    b.Property<int>("minimum")
                        .HasColumnType("integer");

                    b.Property<long>("statHash")
                        .HasColumnType("bigint");

                    b.Property<long>("statsBlockId")
                        .HasColumnType("bigint");

                    b.Property<int>("value")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("statsBlockId");

                    b.ToTable("StatEntries");
                });

            modelBuilder.Entity("StatsBlock", b =>
                {
                    b.Property<long>("statGroupHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("statGroupHash"));

                    b.Property<bool>("disablePrimaryStatDisplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("hasDisplayableStats")
                        .HasColumnType("boolean");

                    b.Property<long>("primaryBaseStatHash")
                        .HasColumnType("bigint");

                    b.HasKey("statGroupHash");

                    b.ToTable("StatsBlocks");
                });

            modelBuilder.Entity("TalentGrid", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("buildName")
                        .HasColumnType("text");

                    b.Property<int>("hudDamageType")
                        .HasColumnType("integer");

                    b.Property<string>("hudIcon")
                        .HasColumnType("text");

                    b.Property<string>("itemDetailString")
                        .HasColumnType("text");

                    b.Property<long>("talentGridHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.ToTable("TalentGrids");
                });

            modelBuilder.Entity("TooltipNotification", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("displayString")
                        .HasColumnType("text");

                    b.Property<string>("displayStyle")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ItemId");

                    b.ToTable("TooltipNotifications");
                });

            modelBuilder.Entity("TranslationBlock", b =>
                {
                    b.Property<long>("weaponPatternHash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("weaponPatternHash"));

                    b.Property<bool>("hasGeometry")
                        .HasColumnType("boolean");

                    b.Property<string>("weaponPatternIdentifier")
                        .HasColumnType("text");

                    b.HasKey("weaponPatternHash");

                    b.ToTable("TranslationBlocks");
                });

            modelBuilder.Entity("ValueBlock", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<string>("valueDescription")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("ValueBlocks");
                });

            modelBuilder.Entity("Version", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("id"));

                    b.Property<long?>("QualityId")
                        .HasColumnType("bigint");

                    b.Property<long>("powerCapHash")
                        .HasColumnType("bigint");

                    b.HasKey("id");

                    b.HasIndex("QualityId");

                    b.ToTable("Versions");
                });

            modelBuilder.Entity("Arrangement", b =>
                {
                    b.HasOne("TranslationBlock", null)
                        .WithMany("arrangements")
                        .HasForeignKey("TranslationBlockweaponPatternHash");
                });

            modelBuilder.Entity("CraftingBlockBonusPlug", b =>
                {
                    b.HasOne("Crafting", null)
                        .WithMany("bonusPlugs")
                        .HasForeignKey("CraftingId");
                });

            modelBuilder.Entity("DyeReference", b =>
                {
                    b.HasOne("TranslationBlock", "translationBlock")
                        .WithMany("lockedDyes")
                        .HasForeignKey("translationBlockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("translationBlock");
                });

            modelBuilder.Entity("IntrinsicSocketEntryDefinition", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("intrinsicSockets")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("InvestmentStat", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("investmentStats")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.HasOne("Action", "action")
                        .WithMany()
                        .HasForeignKey("ActionId");

                    b.HasOne("DestinyColor", "backgroundColor")
                        .WithMany()
                        .HasForeignKey("BackgroundColorId");

                    b.HasOne("Crafting", "crafting")
                        .WithMany()
                        .HasForeignKey("CraftingId");

                    b.HasOne("DisplayProperties", "displayProperties")
                        .WithMany()
                        .HasForeignKey("DisplayPropertiesId");

                    b.HasOne("EquippingBlock", "equippingBlock")
                        .WithMany()
                        .HasForeignKey("EquippingBlockId");

                    b.HasOne("Inventory", "inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("Quality", "quality")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("SetBlock", "setData")
                        .WithMany()
                        .HasForeignKey("SetDataId");

                    b.HasOne("SocketBlock", "sockets")
                        .WithMany()
                        .HasForeignKey("SocketsId");

                    b.HasOne("StatsBlock", "stats")
                        .WithMany()
                        .HasForeignKey("StatsId");

                    b.HasOne("TalentGrid", "talentGrid")
                        .WithMany()
                        .HasForeignKey("TalentGridId");

                    b.HasOne("TranslationBlock", "translationBlock")
                        .WithMany()
                        .HasForeignKey("TranslationBlockId");

                    b.HasOne("ValueBlock", "value")
                        .WithMany()
                        .HasForeignKey("ValueId");

                    b.Navigation("action");

                    b.Navigation("backgroundColor");

                    b.Navigation("crafting");

                    b.Navigation("displayProperties");

                    b.Navigation("equippingBlock");

                    b.Navigation("inventory");

                    b.Navigation("quality");

                    b.Navigation("setData");

                    b.Navigation("sockets");

                    b.Navigation("stats");

                    b.Navigation("talentGrid");

                    b.Navigation("translationBlock");

                    b.Navigation("value");
                });

            modelBuilder.Entity("ItemQuantity", b =>
                {
                    b.HasOne("ValueBlock", null)
                        .WithMany("itemValue")
                        .HasForeignKey("ValueBlockId");
                });

            modelBuilder.Entity("PerkEntry", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("perks")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("ProgressionReward", b =>
                {
                    b.HasOne("Action", null)
                        .WithMany("progressionRewards")
                        .HasForeignKey("ActionId");
                });

            modelBuilder.Entity("RequiredItem", b =>
                {
                    b.HasOne("Action", null)
                        .WithMany("requiredItems")
                        .HasForeignKey("ActionId");
                });

            modelBuilder.Entity("SetBlockEntry", b =>
                {
                    b.HasOne("SetBlock", null)
                        .WithMany("itemList")
                        .HasForeignKey("SetBlockId");
                });

            modelBuilder.Entity("SocketCategory", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("socketCategories")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.HasOne("SocketBlock", null)
                        .WithMany("socketEntries")
                        .HasForeignKey("SocketBlockId");
                });

            modelBuilder.Entity("SocketEntryPlugItem", b =>
                {
                    b.HasOne("SocketEntry", null)
                        .WithMany("reusablePlugItems")
                        .HasForeignKey("SocketEntryId");
                });

            modelBuilder.Entity("StatEntry", b =>
                {
                    b.HasOne("StatsBlock", "statsBlock")
                        .WithMany("statsList")
                        .HasForeignKey("statsBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("statsBlock");
                });

            modelBuilder.Entity("TooltipNotification", b =>
                {
                    b.HasOne("Item", null)
                        .WithMany("tooltipNotifications")
                        .HasForeignKey("ItemId");
                });

            modelBuilder.Entity("Version", b =>
                {
                    b.HasOne("Quality", null)
                        .WithMany("versions")
                        .HasForeignKey("QualityId");
                });

            modelBuilder.Entity("Action", b =>
                {
                    b.Navigation("progressionRewards");

                    b.Navigation("requiredItems");
                });

            modelBuilder.Entity("Crafting", b =>
                {
                    b.Navigation("bonusPlugs");
                });

            modelBuilder.Entity("Item", b =>
                {
                    b.Navigation("investmentStats");

                    b.Navigation("perks");

                    b.Navigation("tooltipNotifications");
                });

            modelBuilder.Entity("Quality", b =>
                {
                    b.Navigation("versions");
                });

            modelBuilder.Entity("SetBlock", b =>
                {
                    b.Navigation("itemList");
                });

            modelBuilder.Entity("SocketBlock", b =>
                {
                    b.Navigation("intrinsicSockets");

                    b.Navigation("socketCategories");

                    b.Navigation("socketEntries");
                });

            modelBuilder.Entity("SocketEntry", b =>
                {
                    b.Navigation("reusablePlugItems");
                });

            modelBuilder.Entity("StatsBlock", b =>
                {
                    b.Navigation("statsList");
                });

            modelBuilder.Entity("TranslationBlock", b =>
                {
                    b.Navigation("arrangements");

                    b.Navigation("lockedDyes");
                });

            modelBuilder.Entity("ValueBlock", b =>
                {
                    b.Navigation("itemValue");
                });
#pragma warning restore 612, 618
        }
    }
}
